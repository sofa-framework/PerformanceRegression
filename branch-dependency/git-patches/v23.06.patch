diff --git a/Sofa/Component/AnimationLoop/src/sofa/component/animationloop/FreeMotionAnimationLoop.cpp b/Sofa/Component/AnimationLoop/src/sofa/component/animationloop/FreeMotionAnimationLoop.cpp
index 317096eb3f..f31e2f0301 100644
--- a/Sofa/Component/AnimationLoop/src/sofa/component/animationloop/FreeMotionAnimationLoop.cpp
+++ b/Sofa/Component/AnimationLoop/src/sofa/component/animationloop/FreeMotionAnimationLoop.cpp
@@ -276,18 +276,24 @@ void FreeMotionAnimationLoop::step(const sofa::core::ExecParams* params, SReal d
         {
             l_constraintSolver->solveConstraint(&cparams, pos, vel);
         }
+        {
+            SCOPED_TIMER("ProjectAndPropagateDx");
 
-        MultiVecDeriv cdx(&vop, l_constraintSolver->getDx());
-        mop.projectResponse(cdx);
-        mop.propagateDx(cdx, true);
+            MultiVecDeriv cdx(&vop, l_constraintSolver->getDx());
+            mop.projectResponse(cdx);
+            mop.propagateDx(cdx, true);
+        }
     }
 
     MechanicalEndIntegrationVisitor endVisitor(params, dt);
     gnode->execute(&endVisitor);
 
-    mop.projectPositionAndVelocity(pos, vel);
-    mop.propagateXAndV(pos, vel);
+    {
+        SCOPED_TIMER("ProjectAndPropagateXAndV");
 
+        mop.projectPositionAndVelocity(pos, vel);
+        mop.propagateXAndV(pos, vel);
+    }
     gnode->setTime ( startTime + dt );
     gnode->execute<UpdateSimulationContextVisitor>(params);  // propagate time
 
@@ -311,7 +317,7 @@ void FreeMotionAnimationLoop::step(const sofa::core::ExecParams* params, SReal d
 
     if (d_computeBoundingBox.getValue())
     {
-        ScopedAdvancedTimer timer("UpdateBBox");
+        SCOPED_TIMER("UpdateBBox");
         gnode->execute<UpdateBoundingBoxVisitor>(params);
     }
 
@@ -349,7 +355,7 @@ void FreeMotionAnimationLoop::FreeMotionAndCollisionDetection(const sofa::core::
         preCollisionComputation(params);
 
         {
-            ScopedAdvancedTimer collisionResetTimer("CollisionReset");
+
             CollisionResetVisitor act(params);
             act.setTags(this->getTags());
             act.execute(getContext());
@@ -359,7 +365,6 @@ void FreeMotionAnimationLoop::FreeMotionAndCollisionDetection(const sofa::core::
         taskScheduler->addTask(freeMotionTaskStatus, [&]() { computeFreeMotion(params, cparams, dt, pos, freePos, freeVel, mop); });
 
         {
-            ScopedAdvancedTimer collisionDetectionTimer("CollisionDetection");
             CollisionDetectionVisitor act(params);
             act.setTags(this->getTags());
             act.execute(getContext());
@@ -371,7 +376,6 @@ void FreeMotionAnimationLoop::FreeMotionAndCollisionDetection(const sofa::core::
         }
 
         {
-            ScopedAdvancedTimer collisionResponseTimer("CollisionResponse");
             CollisionResponseVisitor act(params);
             act.setTags(this->getTags());
             act.execute(getContext());
@@ -388,7 +392,7 @@ void FreeMotionAnimationLoop::computeFreeMotion(const sofa::core::ExecParams* pa
                                          simulation::common::MechanicalOperations* mop)
 {
     {
-        sofa::helper::ScopedAdvancedTimer timer("FreeMotion");
+        SCOPED_TIMER("FreeMotion");
         simulation::SolveVisitor freeMotion(params, dt, true, d_parallelODESolving.getValue());
         gnode->execute(&freeMotion);
     }
diff --git a/Sofa/Component/ODESolver/Backward/src/sofa/component/odesolver/backward/EulerImplicitSolver.cpp b/Sofa/Component/ODESolver/Backward/src/sofa/component/odesolver/backward/EulerImplicitSolver.cpp
index 60f1f03db3..152bab40aa 100644
--- a/Sofa/Component/ODESolver/Backward/src/sofa/component/odesolver/backward/EulerImplicitSolver.cpp
+++ b/Sofa/Component/ODESolver/Backward/src/sofa/component/odesolver/backward/EulerImplicitSolver.cpp
@@ -20,14 +20,14 @@
 * Contact information: contact@sofa-framework.org                             *
 ******************************************************************************/
 #include <sofa/component/odesolver/backward/EulerImplicitSolver.h>
-
+#include <sofa/core/ObjectFactory.h>
+#include <sofa/core/behavior/MultiMatrix.h>
 #include <sofa/core/visual/VisualParams.h>
+#include <sofa/helper/AdvancedTimer.h>
 #include <sofa/simulation/MechanicalOperations.h>
 #include <sofa/simulation/VectorOperations.h>
-#include <sofa/helper/AdvancedTimer.h>
-#include <sofa/core/ObjectFactory.h>
-#include <sofa/core/behavior/MultiMatrix.h>
 
+#include "sofa/helper/ScopedAdvancedTimer.h"
 
 namespace sofa::component::odesolver::backward
 {
@@ -110,58 +110,62 @@ void EulerImplicitSolver::solve(const core::ExecParams* params, SReal dt, sofa::
 
     msg_info() << "trapezoidal factor = " << tr;
 
-    sofa::helper::AdvancedTimer::stepBegin("ComputeForce");
-    mop->setImplicit(true); // this solver is implicit
-    // compute the net forces at the beginning of the time step
-    mop.computeForce(f);
-
-    msg_info() << "EulerImplicitSolver, initial f = " << f;
-
-    sofa::helper::AdvancedTimer::stepNext ("ComputeForce", "ComputeRHTerm");
-    if( firstOrder )
     {
-        b.eq(f);
+        SCOPED_TIMER("ComputeForce");
+        mop->setImplicit(true); // this solver is implicit
+        // compute the net forces at the beginning of the time step
+        mop.computeForce(f);
     }
-    else
-    {
-        // new more powerful visitors
-
-        // force in the current configuration
-        b.eq(f,1.0/tr);                                                                         // b = f0
+    msg_info() << "EulerImplicitSolver, initial f = " << f;
 
-        msg_info() << "EulerImplicitSolver, f = " << f;
+    {
+        SCOPED_TIMER("ComputeRHTerm");
+        if( firstOrder )
+        {
+            b.eq(f);
+        }
+        else
+        {
+            // new more powerful visitors
 
-        // add the change of force due to stiffness + Rayleigh damping
-        mop.addMBKv(b, -f_rayleighMass.getValue(), 1, h+f_rayleighStiffness.getValue()); // b =  f0 + ( rm M + B + (h+rs) K ) v
+            // force in the current configuration
+            b.eq(f,1.0/tr);                                                                         // b = f0
 
-        // integration over a time step
-        b.teq(h*tr);                                                                        // b = h(f0 + ( rm M + B + (h+rs) K ) v )
-    }
+            msg_info() << "EulerImplicitSolver, f = " << f;
 
-    msg_info() << "EulerImplicitSolver, b = " << b;
+            // add the change of force due to stiffness + Rayleigh damping
+            mop.addMBKv(b, -f_rayleighMass.getValue(), 1, h+f_rayleighStiffness.getValue()); // b =  f0 + ( rm M + B + (h+rs) K ) v
 
-    mop.projectResponse(b);          // b is projected to the constrained space
+            // integration over a time step
+            b.teq(h*tr);                                                                        // b = h(f0 + ( rm M + B + (h+rs) K ) v )
+        }
 
-    msg_info() << "EulerImplicitSolver, projected b = " << b;
+        msg_info() << "EulerImplicitSolver, b = " << b;
 
-    sofa::helper::AdvancedTimer::stepNext ("ComputeRHTerm", "MBKBuild");
+        mop.projectResponse(b);          // b is projected to the constrained space
 
+        msg_info() << "EulerImplicitSolver, projected b = " << b;
+    }
     core::behavior::MultiMatrix<simulation::common::MechanicalOperations> matrix(&mop);
+    {
+        SCOPED_TIMER("setSystemMBKMatrix");
+        if (firstOrder)
+            matrix.setSystemMBKMatrix(MechanicalMatrix(1,0,-h*tr)); //MechanicalMatrix::K * (-h*tr) + MechanicalMatrix::M;
+        else
+            matrix.setSystemMBKMatrix(MechanicalMatrix(1+tr*h*f_rayleighMass.getValue(),-tr*h,-tr*h*(h+f_rayleighStiffness.getValue()))); // MechanicalMatrix::K * (-tr*h*(h+f_rayleighStiffness.getValue())) + MechanicalMatrix::B * (-tr*h) + MechanicalMatrix::M * (1+tr*h*f_rayleighMass.getValue());
 
-    if (firstOrder)
-        matrix.setSystemMBKMatrix(MechanicalMatrix(1,0,-h*tr)); //MechanicalMatrix::K * (-h*tr) + MechanicalMatrix::M;
-    else
-        matrix.setSystemMBKMatrix(MechanicalMatrix(1+tr*h*f_rayleighMass.getValue(),-tr*h,-tr*h*(h+f_rayleighStiffness.getValue()))); // MechanicalMatrix::K * (-tr*h*(h+f_rayleighStiffness.getValue())) + MechanicalMatrix::B * (-tr*h) + MechanicalMatrix::M * (1+tr*h*f_rayleighMass.getValue());
-
-    msg_info() << "EulerImplicitSolver, matrix = " << (MechanicalMatrix::K * (-h * (h + f_rayleighStiffness.getValue())) + MechanicalMatrix::M * (1 + h * f_rayleighMass.getValue())) << " = " << matrix;
-    msg_info() << "EulerImplicitSolver, Matrix K = " << MechanicalMatrix::K;
+        msg_info() << "EulerImplicitSolver, matrix = " << (MechanicalMatrix::K * (-h * (h + f_rayleighStiffness.getValue())) + MechanicalMatrix::M * (1 + h * f_rayleighMass.getValue())) << " = " << matrix;
+        msg_info() << "EulerImplicitSolver, Matrix K = " << MechanicalMatrix::K;
 
 #ifdef SOFA_DUMP_VISITOR_INFO
-    simulation::Visitor::printNode("SystemSolution");
+        simulation::Visitor::printNode("SystemSolution");
 #endif
-    sofa::helper::AdvancedTimer::stepNext ("MBKBuild", "MBKSolve");
-    matrix.solve(x, b); //Call to ODE resolution: x is the solution of the system
-    sofa::helper::AdvancedTimer::stepEnd  ("MBKSolve");
+    }
+
+    {
+        SCOPED_TIMER("MBKSolve");
+        matrix.solve(x, b); //Call to ODE resolution: x is the solution of the system
+    }
 #ifdef SOFA_DUMP_VISITOR_INFO
     simulation::Visitor::printCloseNode("SystemSolution");
 #endif
diff --git a/Sofa/GUI/Qt/src/sofa/gui/qt/RealGUI.cpp b/Sofa/GUI/Qt/src/sofa/gui/qt/RealGUI.cpp
index 1ab2bffbf1..6b76a20bba 100644
--- a/Sofa/GUI/Qt/src/sofa/gui/qt/RealGUI.cpp
+++ b/Sofa/GUI/Qt/src/sofa/gui/qt/RealGUI.cpp
@@ -68,6 +68,7 @@
 #include <sofa/component/visual/VisualStyle.h>
 #include <sofa/helper/AdvancedTimer.h>
 #include <sofa/helper/ScopedAdvancedTimer.h>
+#include <sofa/simulation/SimulationLoop.h>
 
 #include <sofa/helper/system/SetDirectory.h>
 using sofa::helper::system::SetDirectory;
@@ -2274,6 +2275,7 @@ void RealGUI::interactionGUI ( bool )
 //called at each step of the rendering
 void RealGUI::step()
 {
+    SIMULATION_LOOP_SCOPE
     sofa::helper::AdvancedTimer::begin("Animate");
 
     Node* root = currentSimulation();
diff --git a/Sofa/framework/Config/CMakeLists.txt b/Sofa/framework/Config/CMakeLists.txt
index f6d705cdd1..d60b2df995 100644
--- a/Sofa/framework/Config/CMakeLists.txt
+++ b/Sofa/framework/Config/CMakeLists.txt
@@ -235,6 +235,24 @@ if(SOFA_OPENMP)
     endif()
 endif()
 
+## Tracy
+option(SOFA_TRACY "Compile SOFA with the Tracy profiler client")
+if (SOFA_TRACY)
+    set(SOFA_TRACY_VERSION v0.11.1)
+    include(FetchContent)
+    option(TRACY_STATIC "Whether to build Tracy as a static library" OFF)
+    FetchContent_Declare (
+        tracy
+        GIT_REPOSITORY https://github.com/wolfpld/tracy.git
+        GIT_TAG ${SOFA_TRACY_VERSION}
+        GIT_SHALLOW TRUE
+        GIT_PROGRESS TRUE
+    )
+    FetchContent_MakeAvailable (tracy)
+    target_link_libraries(${PROJECT_NAME} PUBLIC TracyClient )
+    message(STATUS "SOFA is compiled with the Tracy profiler client. Use the Tracy server ${SOFA_TRACY_VERSION}.")
+endif()
+
 # An important C++11 feature may be not enabled due to
 # the compiler being built without the --enable-libstdcxx-time option.
 if(CMAKE_COMPILER_IS_GNUCXX)
diff --git a/Sofa/framework/Core/src/sofa/core/behavior/ConstraintSolver.cpp b/Sofa/framework/Core/src/sofa/core/behavior/ConstraintSolver.cpp
index 5a5538b148..abcb6803f4 100644
--- a/Sofa/framework/Core/src/sofa/core/behavior/ConstraintSolver.cpp
+++ b/Sofa/framework/Core/src/sofa/core/behavior/ConstraintSolver.cpp
@@ -34,38 +34,34 @@ ConstraintSolver::~ConstraintSolver() = default;
 void ConstraintSolver::solveConstraint(const ConstraintParams * cParams, MultiVecId res1, MultiVecId res2)
 {
     const std::string className = "SolveConstraint: " + cParams->getName();
-    sofa::helper::ScopedAdvancedTimer solveConstraintTimer(className);
+    SCOPED_TIMER("SolveConstraint");
 
     bool continueSolving = true;
     {
-        sofa::helper::AdvancedTimer::stepBegin(className + " - PrepareState");
+        SCOPED_TIMER("PrepareState");
         continueSolving = prepareStates(cParams, res1, res2);
-        sofa::helper::AdvancedTimer::stepEnd(className + " - PrepareState");
     }
 
     if (continueSolving)
     {
-        sofa::helper::AdvancedTimer::stepBegin(className + " - BuildSystem");
+        SCOPED_TIMER("BuildSystem");
         continueSolving = buildSystem(cParams, res1, res2);
-        sofa::helper::AdvancedTimer::stepEnd(className + " - BuildSystem");
 
         postBuildSystem(cParams);
     }
 
     if (continueSolving)
     {
-        sofa::helper::AdvancedTimer::stepBegin(className + " - SolveSystem");
+        SCOPED_TIMER("SolveSystem");
         continueSolving = solveSystem(cParams, res1, res2);
-        sofa::helper::AdvancedTimer::stepEnd(className + " - SolveSystem");
 
         postSolveSystem(cParams);
     }
 
     if (continueSolving)
     {
-        sofa::helper::AdvancedTimer::stepBegin(className + " - ApplyCorrection");
+        SCOPED_TIMER("ApplyCorrection");
         applyCorrection(cParams, res1, res2);
-        sofa::helper::AdvancedTimer::stepEnd(className + " - ApplyCorrection");
     }
 }
 
diff --git a/Sofa/framework/Helper/CMakeLists.txt b/Sofa/framework/Helper/CMakeLists.txt
index 96dc1b5635..514014a69e 100644
--- a/Sofa/framework/Helper/CMakeLists.txt
+++ b/Sofa/framework/Helper/CMakeLists.txt
@@ -199,6 +199,11 @@ elseif(CMAKE_SYSTEM_NAME STREQUAL Windows)
     list(APPEND SOURCE_FILES  ${SRC_ROOT}/system/FileMonitor_windows.cpp)
 endif()
 
+if (SOFA_TRACY)
+    list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h)
+    list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp)
+endif()
+
 sofa_find_package(Sofa.Config REQUIRED)
 sofa_find_package(Sofa.Type REQUIRED)
 sofa_find_package(Sofa.Topology REQUIRED)
diff --git a/Sofa/framework/Helper/src/sofa/helper/ScopedAdvancedTimer.h b/Sofa/framework/Helper/src/sofa/helper/ScopedAdvancedTimer.h
index 93a029178e..b7410420d0 100644
--- a/Sofa/framework/Helper/src/sofa/helper/ScopedAdvancedTimer.h
+++ b/Sofa/framework/Helper/src/sofa/helper/ScopedAdvancedTimer.h
@@ -48,3 +48,11 @@ struct SOFA_HELPER_API ScopedAdvancedTimer
 
 } /// sofa::helper
 
+#ifdef TRACY_ENABLE
+    #include <tracy/Tracy.hpp>
+    #define SCOPED_TIMER(name) ZoneScopedN(name)
+    #define SCOPED_TIMER_VARNAME(varname, name) ZoneNamedN(varname, name, true)
+#else
+    #define SCOPED_TIMER(name) sofa::helper::ScopedAdvancedTimer timer(name)
+    #define SCOPED_TIMER_VARNAME(varname, name) sofa::helper::ScopedAdvancedTimer varname(name)
+#endif
diff --git a/Sofa/framework/Helper/src/sofa/helper/logging/TracyMessageHandler.cpp b/Sofa/framework/Helper/src/sofa/helper/logging/TracyMessageHandler.cpp
new file mode 100644
index 0000000000..27ebc99b99
--- /dev/null
+++ b/Sofa/framework/Helper/src/sofa/helper/logging/TracyMessageHandler.cpp
@@ -0,0 +1,63 @@
+﻿/******************************************************************************
+*                 SOFA, Simulation Open-Framework Architecture                *
+*                    (c) 2006 INRIA, USTL, UJF, CNRS, MGH                     *
+*                                                                             *
+* This program is free software; you can redistribute it and/or modify it     *
+* under the terms of the GNU Lesser General Public License as published by    *
+* the Free Software Foundation; either version 2.1 of the License, or (at     *
+* your option) any later version.                                             *
+*                                                                             *
+* This program is distributed in the hope that it will be useful, but WITHOUT *
+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *
+* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *
+* for more details.                                                           *
+*                                                                             *
+* You should have received a copy of the GNU Lesser General Public License    *
+* along with this program. If not, see <http://www.gnu.org/licenses/>.        *
+*******************************************************************************
+* Authors: The SOFA Team and external contributors (see Authors.txt)          *
+*                                                                             *
+* Contact information: contact@sofa-framework.org                             *
+******************************************************************************/
+
+#include <sofa/helper/logging/DefaultStyleMessageFormatter.h>
+#include <sofa/helper/logging/TracyMessageHandler.h>
+#include <sofa/helper/logging/MessageFormatter.h>
+#ifdef TRACY_ENABLE
+#include <tracy/Tracy.hpp>
+#endif
+
+
+namespace sofa::helper::logging
+{
+
+TracyMessageHandler::TracyMessageHandler(MessageFormatter* formatter)
+    : m_formatter(formatter)
+{
+    if (m_formatter == nullptr)
+    {
+        m_formatter = &DefaultStyleMessageFormatter::getInstance();
+    }
+}
+
+void TracyMessageHandler::process(Message& m)
+{
+#ifdef TRACY_ENABLE
+    std::stringstream ss;
+    m_formatter->formatMessage(m, ss) ;
+    TracyMessage(ss.str().c_str(), ss.str().size());
+#endif
+}
+
+void TracyMessageHandler::setMessageFormatter(MessageFormatter* formatter)
+{
+    m_formatter = formatter;
+}
+
+TracyMessageHandler& MainTracyMessageHandler::getInstance()
+{
+    static TracyMessageHandler s_instance;
+    return s_instance;
+}
+
+}
diff --git a/Sofa/framework/Helper/src/sofa/helper/logging/TracyMessageHandler.h b/Sofa/framework/Helper/src/sofa/helper/logging/TracyMessageHandler.h
new file mode 100644
index 0000000000..3f16256d3a
--- /dev/null
+++ b/Sofa/framework/Helper/src/sofa/helper/logging/TracyMessageHandler.h
@@ -0,0 +1,63 @@
+﻿/******************************************************************************
+*                 SOFA, Simulation Open-Framework Architecture                *
+*                    (c) 2006 INRIA, USTL, UJF, CNRS, MGH                     *
+*                                                                             *
+* This program is free software; you can redistribute it and/or modify it     *
+* under the terms of the GNU Lesser General Public License as published by    *
+* the Free Software Foundation; either version 2.1 of the License, or (at     *
+* your option) any later version.                                             *
+*                                                                             *
+* This program is distributed in the hope that it will be useful, but WITHOUT *
+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *
+* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *
+* for more details.                                                           *
+*                                                                             *
+* You should have received a copy of the GNU Lesser General Public License    *
+* along with this program. If not, see <http://www.gnu.org/licenses/>.        *
+*******************************************************************************
+* Authors: The SOFA Team and external contributors (see Authors.txt)          *
+*                                                                             *
+* Contact information: contact@sofa-framework.org                             *
+******************************************************************************/
+/*****************************************************************************
+* User of this library should read the documentation
+* in the messaging.h file.
+******************************************************************************/
+#pragma once
+
+#include <sofa/helper/logging/MessageHandler.h>
+#include <sofa/helper/config.h>
+
+namespace sofa::helper::logging
+{
+
+class MessageFormatter;
+
+/// Send the message to the Tracy profiler
+class SOFA_HELPER_API TracyMessageHandler : public MessageHandler
+{
+public:
+    /// Create a new ConsoleMessageHandler. By default the handler is using the
+    /// DefaultStyleMessageFormatter object to format the message.
+    TracyMessageHandler(MessageFormatter* formatter = nullptr);
+    void process(Message &m) override ;
+    void setMessageFormatter( MessageFormatter* formatter );
+
+private:
+    MessageFormatter *m_formatter { nullptr };
+
+};
+
+///
+/// \brief The MainTracyMessageHandler class contains a singleton to TracyMessageHandler
+/// and offer static version of TracyMessageHandler API
+///
+/// \see TracyMessageHandler
+///
+class SOFA_HELPER_API MainTracyMessageHandler
+{
+public:
+    static TracyMessageHandler& getInstance() ;
+};
+} // namespace sofa::helper::logging
+
diff --git a/Sofa/framework/Simulation/Core/CMakeLists.txt b/Sofa/framework/Simulation/Core/CMakeLists.txt
index 3b8a6d136a..c0d6c8d5da 100644
--- a/Sofa/framework/Simulation/Core/CMakeLists.txt
+++ b/Sofa/framework/Simulation/Core/CMakeLists.txt
@@ -48,6 +48,7 @@ set(HEADER_FILES
     ${SRC_ROOT}/ResetVisitor.h
     ${SRC_ROOT}/SceneLoaderFactory.h
     ${SRC_ROOT}/Simulation.h
+    ${SRC_ROOT}/SimulationLoop.h
     ${SRC_ROOT}/SolveVisitor.h
     ${SRC_ROOT}/StateChangeVisitor.h
     ${SRC_ROOT}/TopologyChangeVisitor.h
diff --git a/Sofa/framework/Simulation/Core/src/sofa/simulation/AnimateVisitor.cpp b/Sofa/framework/Simulation/Core/src/sofa/simulation/AnimateVisitor.cpp
index 6b15933f7e..e9d1b9c0cd 100644
--- a/Sofa/framework/Simulation/Core/src/sofa/simulation/AnimateVisitor.cpp
+++ b/Sofa/framework/Simulation/Core/src/sofa/simulation/AnimateVisitor.cpp
@@ -55,6 +55,7 @@ using sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv;
 
 #include <sofa/simulation/mechanicalvisitor/MechanicalBuildConstraintMatrix.h>
 using sofa::simulation::mechanicalvisitor::MechanicalBuildConstraintMatrix;
+#include <sofa/helper/ScopedAdvancedTimer.h>
 
 using namespace sofa::core;
 
@@ -93,8 +94,12 @@ void AnimateVisitor::processCollisionPipeline(simulation::Node* node, core::coll
     }
     sofa::helper::AdvancedTimer::stepEnd("begin collision",obj);
 
-    CollisionVisitor act(this->params);
-    node->execute(&act);
+    {
+        SCOPED_TIMER("collision");
+
+        CollisionVisitor act(this->params);
+        node->execute(&act);
+    }
 
     sofa::helper::AdvancedTimer::stepBegin("end collision",obj);
     {
@@ -154,20 +159,30 @@ Visitor::Result AnimateVisitor::processNodeTopDown(simulation::Node* node)
             MechanicalAccumulateMatrixDeriv accumulateMatrixDeriv(&cparams, core::MatrixDerivId::constraintJacobian());
             accumulateMatrixDeriv.execute(node);
         }
+        {
+            SCOPED_TIMER("solve");
+            for( unsigned i=0; i<node->solver.size(); i++ )
+            {
+                ctime_t t0 = begin(node, node->solver[i]);
+                node->solver[i]->solve(params, getDt());
+                end(node, node->solver[i], t0);
+            }
+        }
 
-        for( unsigned i=0; i<node->solver.size(); i++ )
         {
-            ctime_t t0 = begin(node, node->solver[i]);
-            node->solver[i]->solve(params, getDt());
-            end(node, node->solver[i], t0);
+            SCOPED_TIMER("projectPositionAndVelocity");
+
+            MechanicalProjectPositionAndVelocityVisitor(&m_mparams, nextTime,
+                                                        sofa::core::VecCoordId::position(), sofa::core::VecDerivId::velocity()
+                                                        ).execute( node );
         }
+        {
+            SCOPED_TIMER("propagateOnlyPositionAndVelocity");
 
-        MechanicalProjectPositionAndVelocityVisitor(&m_mparams, nextTime,
-                                                    sofa::core::VecCoordId::position(), sofa::core::VecDerivId::velocity()
-                                                    ).execute( node );
-        MechanicalPropagateOnlyPositionAndVelocityVisitor(&m_mparams, nextTime,
-                                                          VecCoordId::position(),
-                                                          VecDerivId::velocity()).execute( node );
+            MechanicalPropagateOnlyPositionAndVelocityVisitor(&m_mparams, nextTime,
+                                                              VecCoordId::position(),
+                                                              VecDerivId::velocity()).execute( node );
+        }
 
         MechanicalEndIntegrationVisitor endVisitor(this->params, dt);
         node->execute(&endVisitor);
diff --git a/Sofa/framework/Simulation/Core/src/sofa/simulation/CollisionAnimationLoop.cpp b/Sofa/framework/Simulation/Core/src/sofa/simulation/CollisionAnimationLoop.cpp
index fc5e0ce58a..90a9a24f5f 100644
--- a/Sofa/framework/Simulation/Core/src/sofa/simulation/CollisionAnimationLoop.cpp
+++ b/Sofa/framework/Simulation/Core/src/sofa/simulation/CollisionAnimationLoop.cpp
@@ -57,7 +57,7 @@ CollisionAnimationLoop::~CollisionAnimationLoop()
 
 void CollisionAnimationLoop::preCollisionComputation(const core::ExecParams *params)
 {
-    sofa::helper::ScopedAdvancedTimer timer("CollisionBeginEvent");
+    SCOPED_TIMER("CollisionBeginEvent");
     CollisionBeginEvent evBegin;
     PropagateEventVisitor eventPropagation( params, &evBegin);
     eventPropagation.execute(getContext());
@@ -65,7 +65,7 @@ void CollisionAnimationLoop::preCollisionComputation(const core::ExecParams *par
 
 void CollisionAnimationLoop::internalCollisionComputation(const core::ExecParams *params)
 {
-    sofa::helper::ScopedAdvancedTimer timer("CollisionVisitor");
+    SCOPED_TIMER("CollisionVisitor");
     CollisionVisitor act(params);
     act.setTags(this->getTags());
     act.execute(getContext());
@@ -73,7 +73,7 @@ void CollisionAnimationLoop::internalCollisionComputation(const core::ExecParams
 
 void CollisionAnimationLoop::postCollisionComputation(const core::ExecParams *params)
 {
-    sofa::helper::ScopedAdvancedTimer timer("CollisionEndEvent");
+    SCOPED_TIMER("CollisionEndEvent");
     CollisionEndEvent evEnd;
     PropagateEventVisitor eventPropagation( params, &evEnd);
     eventPropagation.execute(getContext());
diff --git a/Sofa/framework/Simulation/Core/src/sofa/simulation/DefaultAnimationLoop.cpp b/Sofa/framework/Simulation/Core/src/sofa/simulation/DefaultAnimationLoop.cpp
index 3a43314b45..0d13ef2fd4 100644
--- a/Sofa/framework/Simulation/Core/src/sofa/simulation/DefaultAnimationLoop.cpp
+++ b/Sofa/framework/Simulation/Core/src/sofa/simulation/DefaultAnimationLoop.cpp
@@ -137,7 +137,7 @@ void DefaultAnimationLoop::step(const core::ExecParams* params, SReal dt)
 
     if (d_computeBoundingBox.getValue())
     {
-        sofa::helper::ScopedAdvancedTimer timer("UpdateBBox");
+        SCOPED_TIMER("UpdateBBox");
         gnode->execute< UpdateBoundingBoxVisitor >(params);
     }
 
diff --git a/Sofa/framework/Simulation/Core/src/sofa/simulation/PipelineImpl.cpp b/Sofa/framework/Simulation/Core/src/sofa/simulation/PipelineImpl.cpp
index 15571a01de..f218554503 100644
--- a/Sofa/framework/Simulation/Core/src/sofa/simulation/PipelineImpl.cpp
+++ b/Sofa/framework/Simulation/Core/src/sofa/simulation/PipelineImpl.cpp
@@ -29,7 +29,7 @@
 
 #include <sofa/simulation/Node.h>
 
-#include <sofa/helper/AdvancedTimer.h>
+#include <sofa/helper/ScopedAdvancedTimer.h>
 
 namespace sofa
 {
@@ -103,15 +103,15 @@ void PipelineImpl::computeCollisionReset()
         narrowPhaseDetection->setIntersectionMethod(intersectionMethod);
     if (contactManager!=nullptr && contactManager->getIntersectionMethod()!=intersectionMethod)
         contactManager->setIntersectionMethod(intersectionMethod);
-    sofa::helper::AdvancedTimer::stepBegin("CollisionReset");
+    SCOPED_TIMER("CollisionReset");
     doCollisionReset();
-    sofa::helper::AdvancedTimer::stepEnd("CollisionReset");
 }
 
 void PipelineImpl::computeCollisionDetection()
 {
     simulation::Node* root = dynamic_cast<simulation::Node*>(getContext());
     if(root == nullptr) return;
+    SCOPED_TIMER("CollisionDetection");
     std::vector<CollisionModel*> collisionModels;
     root->getTreeObjects<CollisionModel>(&collisionModels);
     doCollisionDetection(collisionModels);
@@ -121,9 +121,8 @@ void PipelineImpl::computeCollisionResponse()
 {
     simulation::Node* root = dynamic_cast<simulation::Node*>(getContext());
     if(root == nullptr) return;
-    sofa::helper::AdvancedTimer::stepBegin("CollisionResponse");
+    SCOPED_TIMER("CollisionResponse");
     doCollisionResponse();
-    sofa::helper::AdvancedTimer::stepEnd("CollisionResponse");
 }
 
 } // namespace simulation
diff --git a/Sofa/framework/Simulation/Core/src/sofa/simulation/Simulation.cpp b/Sofa/framework/Simulation/Core/src/sofa/simulation/Simulation.cpp
index 7a95bc050b..08fdab5415 100644
--- a/Sofa/framework/Simulation/Core/src/sofa/simulation/Simulation.cpp
+++ b/Sofa/framework/Simulation/Core/src/sofa/simulation/Simulation.cpp
@@ -229,7 +229,7 @@ void Simulation::initNode( Node* node)
 /// Execute one timestep. If do is 0, the dt parameter in the graph will be used
 void Simulation::animate ( Node* root, SReal dt )
 {
-    sofa::helper::AdvancedTimer::stepBegin("Simulation::animate");
+    SCOPED_TIMER("Simulation::animate");
 
     if ( !root ) {
         msg_error() << "Simulation::animate, no root found";
@@ -248,7 +248,6 @@ void Simulation::animate ( Node* root, SReal dt )
         return;
     }
 
-    sofa::helper::AdvancedTimer::stepEnd("Simulation::animate");
 }
 
 void Simulation::updateVisual ( Node* root)
diff --git a/Sofa/framework/Simulation/Core/src/sofa/simulation/SimulationLoop.h b/Sofa/framework/Simulation/Core/src/sofa/simulation/SimulationLoop.h
new file mode 100644
index 0000000000..b269843918
--- /dev/null
+++ b/Sofa/framework/Simulation/Core/src/sofa/simulation/SimulationLoop.h
@@ -0,0 +1,29 @@
+﻿/******************************************************************************
+*                 SOFA, Simulation Open-Framework Architecture                *
+*                    (c) 2006 INRIA, USTL, UJF, CNRS, MGH                     *
+*                                                                             *
+* This program is free software; you can redistribute it and/or modify it     *
+* under the terms of the GNU Lesser General Public License as published by    *
+* the Free Software Foundation; either version 2.1 of the License, or (at     *
+* your option) any later version.                                             *
+*                                                                             *
+* This program is distributed in the hope that it will be useful, but WITHOUT *
+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *
+* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *
+* for more details.                                                           *
+*                                                                             *
+* You should have received a copy of the GNU Lesser General Public License    *
+* along with this program. If not, see <http://www.gnu.org/licenses/>.        *
+*******************************************************************************
+* Authors: The SOFA Team and external contributors (see Authors.txt)          *
+*                                                                             *
+* Contact information: contact@sofa-framework.org                             *
+******************************************************************************/
+#pragma once
+
+#ifdef TRACY_ENABLE
+#include <tracy/Tracy.hpp>
+#define SIMULATION_LOOP_SCOPE FrameMark;
+#else
+#define SIMULATION_LOOP_SCOPE
+#endif
diff --git a/applications/projects/runSofa/Main.cpp b/applications/projects/runSofa/Main.cpp
index 7da18b79da..80eb1254ad 100644
--- a/applications/projects/runSofa/Main.cpp
+++ b/applications/projects/runSofa/Main.cpp
@@ -95,6 +95,10 @@ using sofa::helper::logging::ClangMessageHandler ;
 #include <sofa/helper/logging/ExceptionMessageHandler.h>
 using sofa::helper::logging::ExceptionMessageHandler;
 
+#ifdef TRACY_ENABLE
+#include <sofa/helper/logging/TracyMessageHandler.h>
+#endif
+
 #include <sofa/gui/common/ArgumentParser.h>
 
 
@@ -376,6 +380,9 @@ int main(int argc, char** argv)
         msg_warning("") << "Invalid argument '" << messageHandler << "' for '--formatting'";
     }
     MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;
+#ifdef TRACY_ENABLE
+    MessageDispatcher::addHandler(&sofa::helper::logging::MainTracyMessageHandler::getInstance());
+#endif
 
     // Output FileRepositories
     msg_info("runSofa") << "PluginRepository paths = " << PluginRepository.getPathsJoined();
diff --git a/examples/Component/Constraint/Lagrangian/BilateralInteractionConstraint_NNCG.scn b/examples/Component/Constraint/Lagrangian/BilateralLagrangianConstraint_NNCG.scn
similarity index 100%
rename from examples/Component/Constraint/Lagrangian/BilateralInteractionConstraint_NNCG.scn
rename to examples/Component/Constraint/Lagrangian/BilateralLagrangianConstraint_NNCG.scn
diff --git a/examples/Component/Constraint/Lagrangian/BilateralInteractionConstraint_PGS.scn b/examples/Component/Constraint/Lagrangian/BilateralLagrangianConstraint_PGS.scn
similarity index 100%
rename from examples/Component/Constraint/Lagrangian/BilateralInteractionConstraint_PGS.scn
rename to examples/Component/Constraint/Lagrangian/BilateralLagrangianConstraint_PGS.scn
diff --git a/examples/Component/Constraint/Lagrangian/BilateralInteractionConstraint_Rigid.scn b/examples/Component/Constraint/Lagrangian/BilateralLagrangianConstraint_Rigid.scn
similarity index 100%
rename from examples/Component/Constraint/Lagrangian/BilateralInteractionConstraint_Rigid.scn
rename to examples/Component/Constraint/Lagrangian/BilateralLagrangianConstraint_Rigid.scn
diff --git a/examples/Component/Constraint/Lagrangian/BilateralInteractionConstraint_UGS.scn b/examples/Component/Constraint/Lagrangian/BilateralLagrangianConstraint_UGS.scn
similarity index 100%
rename from examples/Component/Constraint/Lagrangian/BilateralInteractionConstraint_UGS.scn
rename to examples/Component/Constraint/Lagrangian/BilateralLagrangianConstraint_UGS.scn
diff --git a/examples/Component/Constraint/Projective/FixedConstraint.scn b/examples/Component/Constraint/Projective/FixedProjectiveConstraint.scn
similarity index 100%
rename from examples/Component/Constraint/Projective/FixedConstraint.scn
rename to examples/Component/Constraint/Projective/FixedProjectiveConstraint.scn
